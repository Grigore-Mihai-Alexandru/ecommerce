generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String
  password   String
  posts      Post[]
  likedPosts Post[]    @relation("LikedPosts")
  comments   Comment[]
  ratings    Rating[]
  image      Image? // One-to-one: profile picture
  createdAt  DateTime  @default(now())
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean   @default(false)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
  category    String?
  subcategory String?
  tags        String[] // Array of strings for tags
  comments    Comment[]
  likes       Int       @default(0)
  likedBy     User[]    @relation("LikedPosts")
  images      Image[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  editedAt  DateTime @updatedAt
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
}

model Image {
  id        Int      @id @default(autoincrement())
  publicId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @unique // 1 to 1 relationship with User
}
